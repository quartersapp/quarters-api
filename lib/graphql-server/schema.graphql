# Queries

type Query {
  artist(id: ID!): Artist,
  currentUser: User,
  conversations: [Conversation!]!,
  conversation(id: ID!): Conversation,
  showsForCity(cityId: ID!): [Show!]!,
  show(id: ID!): Show
}

# Mutations

type Mutation {
  createHostUser(input: CreateHostUserInput!): CreateHostUserPayload
}

input CreateHostUserInput {
  firstName: String!,
  lastName: String!,
  email: String!,
  password: String!
}

type CreateHostUserPayload {
  user: User!
}

# Custom Scalars

scalar Timestamp

# Types & Unions

type User {
  id: ID!,
  email: String!,
  name: String!
}

type Conversation {
  id: ID!,
  participants: [User!]!,
  messages(first: Int): [Message!]!
}

type Message {
  id: ID!,
  author: User!,
  body: String!,
  sentAt: Timestamp!
}

type City {
  id: ID!,
  name: String!,
  googlePlaceId: String!
}

type Venue {
  id: ID!,
  name: String!,
  city: City!,
  googlePlaceId: String!
}

type Genre {
  id: ID!,
  name: String!
}

type Artist {
  id: ID!,
  name: String!,
  bio: String!,
  city: City!,
  genres: [Genre!]!,
  shows: [Show!]!
}

type Show {
  id: ID!,
  day: String!, # TODO: make a YYYY-MM-DD scalar type
  venue: Venue!,
  artists: [Artist!]!
  doorTime: String,
  ageRestriction: String,
  ticketLink: String
}
